============MATERIAIS============

Materiais definem como o nosso objeto irá se comportar com a luz, ou seja, conseguimos usar diferentes materiais para deixarmos o nosso objeto reflexivo, fosco e etc.

Definimos texturas nos próprios materiais, modificando a propriedade "Albedo" do material. As texturas normalmente já vêm com uma configuração de qual parte da textura deve ser aplicada dependendo do objeto que elas forem atribuídas (imagino que esses configurações são feitas realmente no modelo 3D, mas não tenho certeza).

Conseguimos ver os filhos dos objetos que temos na nossa hierarquia na view de "Hierarchy", e lá conseguimos ver quais objetos estão com material ou não mais facilmente.

============PREFAB============

São objetos que já colocamos um material ou configurações personalizadas e salvamos eles com essas configurações para utilizarmos em qualquer lugar do nosso projeto.

Podemos salvar um prefab apenas arrastando um objeto da hierarquia para o nosso project.

============void Update()============

Quase a mesma coisa que o "_process" da Godot, só que não recebe o "delta".

============void FixedUpdate()============

É um Update constante que não depende dos frames do jogo, ou seja, muito bom para físicas.

============transform.Translate(<Vector3>)============

Da mesma maneira que a Godot, a Unity nos permite acessar por código propriedades de objetos do nosso jogo.

Neste caso, acessamos a propriedade "transform" e executamos o método "Translate", passando um "Vector3" em alguma direção (existem shorthands parecidos com enums que nos facilitam criar Vector3 nas direções que queremos)

Podemos fazer dessa forma, mas é melhor fazermos mexendo diretamnte com a física do "Rigidbody".

============Rigidbody.MovePosition(<Vector3>)============

Similar ao "Translate", mas mas em vez de passarmos um Vector3 apenas com direção, devemos passar um Vector3 exatamente na posição que queremos que o objeto se mova.

Felizmente, podemos calcular utilizando a posição de Rigidbody que fica atualizando sempre. 

============Input.GetAxis(<nome do eixo>)============

Input na Unity é similar ao Input da Godot, mas na Unity temos como definir eixos que representam valores na vertical, horizontal e etc. Esses eixos vão de -1 até 1 representando a direção do eixo.A Unity já possui alguns eixos definidos, como "Horizontal" e "Vertical", que usam as setas e WASD para os para definir o valor float que será retornado.

============Time.deltaTime============

Podemos pegar o valor do tempo entre cada frame com essa propriedade de "Time".

Assim como na Godot, isso é útil para fazermos movimentações com valores baseados nos segundos, e não baseados nos frames que estão rodando, tendo em vista que o FPS pode variar e deixar movimentações do personagem inconsistentes.

============VARIÁVEIS NA UI============

Qualquer propriedade da nossa classe que for pública irá aparecer na UI da Unity.

============ANIMAÇÕES============

Animações funcionam de maneira similar às animações na Godot, ou seja, podemos ter uma animação grandona com vários frames e dividí-la em várias animações menores.

Em vez de adicionar os frames um a um, podemos definir um começo e um fim para cada "Clip".

Jogamos animações para nossos objetos apenas arrastando elas para o objeto que queremos. As animações ficam em um componente do objeto chamado "Animator".

Temor uma telinha para o controller de animações que podemos criar lógicas de forma visual, é bem interessante de se ver.

============GetComponent<>()============

Podemos pegar qualquer componente do nosso objeto com esse método, assim conseguindo acessar propriedades desses componentes e etc.

============COLISÕES============

Podemos definir colisões para objetos adicionando componentes de "Collider" neles. Importante saber que não basta os objetos terem colisão para não conseguirmos mais atravessá-los, ao menos um objeto deve ter física, normalmente sendo o objeto do jogador.

Objetos podem ter quantas colisões quisermos.

Temos um "Mesh Collider", que pega o formato do nosso modelo 3D e aplica uma colisão com base no modelo, mas ele acaba sendo muito pesado de computar e não é aconselhado a ser utilizado em muitos objetos, apenas objetos mais simples.

============Model============

Models são nossos modelos 3D.

Podemos definir propriedades como escala e outras coisas na aba "Model".

Podemos definir o esqueleto do nosso modelo na aba "Rig", tendo alguns modelos padrões da unity, como por exemplo o "Humanoid".

A aba de "Animations" é onde definimos as animações do nosso personagem.

============normalized============

É uma propriedade de Vector3 que armazena o valor normalizado (direção) do vetor.

============float Vector3.Distance(<Vector3>, Vector3)============

Esse método estático nos retorna um float com a distância entre um Vector3 e outro.

============Quaternion============

É uma classe que representa uma rotação.

============Quaternion.LookRotation(Vector3)============

É um método que retorna um Quaternion de rotação a partir de uma direção (Vector3).

============PRENDENDO MODELOS NO RIG============

Podemos prender outros modelos 3D em um Rig já pronto nosso.

Para isso, basta colocarmos ele na hierarquia do nosso objeto e deixá-lo como filho da parte do Rig que queremos.

============MESCLANDO ANIMAÇÕES============

Para mesclar animações, precisamos criar uma nova camada no nosso controller de animações do objeto em questão.

Tendo criado a nova camada, temos que definir um "Avatar Mask", onde definimos as partes do nosso Avatar que serão afetadas por aquela animação para a camada que criamos, assim como definir um peso, que é a intensidade com que a animação será aplicada.

============Instantiate============

É o método utilizado para inserirmos novos objetos na nossa cena.

============COPIANDO COMPONENTES============

Podemos copiar valores dos componentes pelo UI da Unity, assim podendo colar todos os valores exatamente da mesma em outro componente do mesmo tipo. Muito útil para salvar informações quando o jogo está rodando.

============Ray============

É uma classe que representa um raio que podemos utilizar para fazer um ray cast.

============Camera.main============

Essa propriedade nos retorna a câmera principal do nosso level.

Podemos utilizar o método "ScreenPointToRay(<Vector3>)" para pegarmos um raio da câmera até a posição passada, que pode ser a "Input.mousePosition", por exemplo.

============Debug============

É uma classe que contém métodos que nos permitem printar coisas no console, mostrar colisões quando rodamos o jogo e fazer ações de debug no geral.

Podemos utilizar o método "DrawRay(<Vector3 start>, <Vector3 direction>, <Color>)". Os dois primeiros argumentos podemos pegar do nosso objeto "Ray" com as propriedades "origin" e "direction". É importante lembrar que o raio irá ficar pequenininho, pois a direção é curta. Podemos resolver isso e aumentar o tamanho do raio multiplicando o valor de "raio.direction" por algum valor alto.

============RaycastHit============

É uma classe que pega o nosso raio e guarda a informação de onde ele está tocando o chão.

============out============

É uma palavra chave do C# que serve para tornarmos possível passar uma variável não iniciada como parâmetro de um método.

============Physics.Raycast()============

Serve para realmente fazermos o nosso ray cast.

Parâmetros:

    1. Ray raio
    2. out RaycastHit hitInfo
    3. float maxDistance
    4. (opcional) LayerMask mask

============LayerMask============

É uma classe que nos permite criar uma máscara de "Layer", assim contendo apenas os objetos que foram da camada que passamos nessa máscara.

Muito útil quando estamos trabalhando com Raycast e queremos ignorar certos objetos.

============Tag============

Similar às Layers, Tags servem para marcarmos objetos com alguma Tag.

Isso é útil para diferenciar inimigos de objetos do cenário, por exemplo.

============Is Trigger============

É uma propriedade de "Rigidbody" onde definimos se o objeto em questão deve usar gatilhos de colisão com outros objetos ao invés de realmente aplicar a colisão.

Isso faz com que o objeto em questão atravesse outras colisões, porém a Unity ainda computa as colisões que teriam acontecido.

============OnTriggerEnter(<Collider other>)============

Parecido com os métodos que escutam sinais na Godot.

Esse método é chamado quando algum objeto entra na colisão do nosso objeto em questão (se o objeto em questão for um Trigger).

============Destroy(<GameObject>)============

É o método que utilizamos para remover objetos da nossa cena.

============EVENTOS EM ANIMAÇÕES============

Podemos criar eventos que serão disparados em momentos específicos das nossas animações na aba "Events" da animação.

Esses eventos serão métodos disparados no nosso script do objeto que possui a animação em questão. Para que funcione, temos que declarar o método no script com exatamente o mesmo nome que demos para o evento.

============Canvas============

É um canvas onde podemos colocar os nossos elementos de UI.

============Text============

Representa um elemento de UI que é um texto, com várias opções para estilizarmos o nosso texto.

Podemos fazê-lo aparecer e desaparecer por código utilizando o método "SetActive(<nome>, <bool>);

============using UnityEngine.SceneManagement;============

Utilizamos a palavra-chave "using" para importar "namespaces".

Esse namespace contém algumas classes que nos permitem trabalhar com as nossas cenas, como por exemplo a "SceneManager", que nos possibilita carregar cenas com o método "LoadScene(<nome da cena>)".

============GameObject.FindWithTag(<nome>)============

Método utilizado para acharmos o objeto na cena que contém a tag passada.

============Random.Range(<int>, <int>)============

"Random" é a classe utilizada para gerar coisas aleatórias na Unity.

Podemos utilizar o método "Range()" para gerar um inteiro aleatório em um range passado (número final não incluído).

============transform.GetChild(<int index>)============

Método utilizado para pegarmos um objeto filho de um objeto a partir de seu índice.

============RESOLVENDO COLISÕES============

Para o jogador não atravessar colisões na diagonal ou quando sua velocidade for muito alta, basta criarmos Raycasts em todas as direções e zerar o Vector3 de direção na direção que ele não pode mais ir.

============using UnityEngine.UI;============

Precisamos utilizar esse namespace para conseguirmos acessar nossos elementos de interface no nosso código, como o "Slider", por exemplo.

============SLIDER UI============

É um slider que podemos utilizar para representar valores de propriedades na nossa UI.

Importante saber que ela vem interativa por padrão, assim permitindo com que o jogador arraste o valor dela. Podemos modificar isso.

O Slider vem com alguns objetos filhos que podemos modificar e remover para deixar do jeito que a gente quer, assim como podemos mexer em muitas outras coisas nesses objetos.

============ÂNCORA============

São as âncoras que definem a posição responsiva dos nossos objetos na UI.

Possui vários presets e podemos personalizar, fazendo com que o elemento sempre fique em determinado canto da tela ou algo do tipo.

============SLICE SPRITE============

Podemos definir um slice para nosso sprite (que podemos utilizar em elementos de UI ou jogos 2D) a partir do "Sprite Editor" da Unity.

Isso é muito útil para definirmos onde a imagem deve ser cortada quando formos esticar ela e etc.

Podemos mudar o tipo da imagem no "Fill" para "Sliced" quando aplicamos um slice no nosso sprite, assim fazendo com que ele não simplesmente estique a imagem no fill, e sim faça um recorte de cada parte.

============Audio Source============

É um componente que podemos utilizar como um source de áudio, para assim conseguirmos tocar uma música no nosso jogo, por exemplo.

Precisa de um "Audio Listener" para ouvir esse "Audio Source", que já vem com a Main Camera da nossa cena. Esse Audio Listener é muito útil quando estamos trabalhando com som 3D, nos dando a possibilidade de colocar o Audio Listener no jogador e fazer com que o som só seja escutável quando estivermos perto de onde ele está sendo tocado, por exemplo.

============AudioClip============

É uma classe que representa um clipe de áudio que podemos guardar no nosso código.

============void Awake() {}============

É um método que roda antes mesmo do start. Muito útil para conseguirmos fazer algo no início do jogo, por exemplo.

============DirectionalLight============

É um objeto que utilizamos para controlar a luz no nosso jogo.

Nele podemos definir a rotação, que irá mudar a posição do "sol", a intensidade da luz, a cor da luz e outras coisas.

É bem interessante de mexer.

============Random.insideUnitSphere============

É uma propriedade de Random que nos retorna um ponto aleatório (Vector3) dentro de uma esfera (aleatório no "y" também).

Ele vem por padrão com o valor de raio como 1, mas podemos multiplicar esse Vector 3 para "aumentar o raio".

Essa esfera tem como ponto inicial um "Vector3.zero", mas podemos fazer com que o ponto inicial seja o "transform.position" de algum objeto acrescentando o valor de "transform.position" do objeto que queremos no ponto aleatório gerado por esse método.

============IGNORANDO LAYERS============

Se queremos passar uma LayerMask para ser ignorada em um Raycast, por exemplo, podemos fazer isso passando o sinal "~" antes do nome da LayerMask quando formos passar o parâmetro.

============COROUTINES============

Coroutines no C# são muito úteis quando queremos executar algumas ações esperando determinado tempo ou um frame seguinte, no caso da Unity.

Podemos fazer coroutines utilizando a interface "IEnumerator" como retorno de nossa coroutine, que nos retorna um "enumerator" (similar aos iterators), nos permitindo utilizar o "yield return", que irá retornar o nosso método e aguardar o frame seguinte para continuar onde tinha parado.

Podemos utilizar "yield return"s em whiles e tudo mais, assim fazendo com que enquanto o código não saia do loop, ele ao menos espere o próximo frame para executar a ação do while novamente. Precisamos colocar um "yield return null;" no nosso while para que ele funcione dessa forma, assim como tornar o tipo do retorno do nosso método como "IEnumerator".

Importante saber que precisamos executar o método com o método "StartCoroutine()" quando o método em questão é uma coroutine.

============FONTES============

Para utilizarmos outras fontes no nosso projeto, devemos ir em "Window -> TextMeshPro" e criar um novo asset de fonte para a nossa fonte em questão.

============On Click ()============

Podemos adicionar o método de algum script de algum objeto para ser rodado nessa propriedade dos nossos botões.

Um exemplo de uso é o botão rodar o método reiniciar do nosso jogo.

============Time.timeSinceLevelLoad============

É uma propriedade de Time que nos retorna o tempo rodado desde o último carregamento da cena.

O tempo é um float que representa os segundos. Para extrairmos os minutos, podemos dividir por 60. Para extrairmos os segundos restantes após os minutos, podemos tirar o módulo de 60.

============PlayerPrefs============

É uma classe que nos permite registrar de fato variáveis que permanecem mesmo depois do fechamento do nosso jogo.

Possui método de Set, Get, Delete e etc.

Muito útil para guardar a pontuação de um player, por exemplo.

